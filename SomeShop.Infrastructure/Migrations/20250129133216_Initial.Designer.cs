// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SomeShop.Infrastructure;

#nullable disable

namespace SomeShop.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250129133216_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SomeShop.Domain.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("SomeShop.Domain.Purchases.Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Purchases", (string)null);
                });

            modelBuilder.Entity("SomeShop.Domain.Purchases.PurchaseItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PurchaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PurchaseId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductId1");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("PurchaseId1");

                    b.ToTable("PurchaseItems", (string)null);
                });

            modelBuilder.Entity("SomeShop.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("SomeShop.Domain.Products.Product", b =>
                {
                    b.OwnsOne("SomeShop.Domain.Products.Article", "Article", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsOne("SomeShop.Domain.Products.Categtory", "Category", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsOne("SomeShop.Domain.Products.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsOne("SomeShop.Domain.Products.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("Article")
                        .IsRequired();

                    b.Navigation("Category")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("SomeShop.Domain.Purchases.Purchase", b =>
                {
                    b.HasOne("SomeShop.Domain.Users.User", null)
                        .WithMany("Purchases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SomeShop.Domain.Purchases.Number", "Number", b1 =>
                        {
                            b1.Property<Guid>("PurchaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PurchaseId");

                            b1.ToTable("Purchases");

                            b1.WithOwner()
                                .HasForeignKey("PurchaseId");
                        });

                    b.OwnsOne("SomeShop.Domain.Purchases.TotalPrice", "TotalPrice", b1 =>
                        {
                            b1.Property<Guid>("PurchaseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("PurchaseId");

                            b1.ToTable("Purchases");

                            b1.WithOwner()
                                .HasForeignKey("PurchaseId");
                        });

                    b.Navigation("Number")
                        .IsRequired();

                    b.Navigation("TotalPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("SomeShop.Domain.Purchases.PurchaseItem", b =>
                {
                    b.HasOne("SomeShop.Domain.Products.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SomeShop.Domain.Products.Product", null)
                        .WithMany("PurchaseItems")
                        .HasForeignKey("ProductId1");

                    b.HasOne("SomeShop.Domain.Purchases.Purchase", null)
                        .WithMany()
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SomeShop.Domain.Purchases.Purchase", null)
                        .WithMany("PurchaseItems")
                        .HasForeignKey("PurchaseId1");

                    b.OwnsOne("SomeShop.Domain.Purchases.PricePerUnit", "PricePerUnit", b1 =>
                        {
                            b1.Property<Guid>("PurchaseItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("PurchaseItemId");

                            b1.ToTable("PurchaseItems");

                            b1.WithOwner()
                                .HasForeignKey("PurchaseItemId");
                        });

                    b.OwnsOne("SomeShop.Domain.Purchases.Quantity", "Quantity", b1 =>
                        {
                            b1.Property<Guid>("PurchaseItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int");

                            b1.HasKey("PurchaseItemId");

                            b1.ToTable("PurchaseItems");

                            b1.WithOwner()
                                .HasForeignKey("PurchaseItemId");
                        });

                    b.Navigation("PricePerUnit")
                        .IsRequired();

                    b.Navigation("Quantity")
                        .IsRequired();
                });

            modelBuilder.Entity("SomeShop.Domain.Users.User", b =>
                {
                    b.OwnsOne("SomeShop.Domain.Users.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("FullName")
                        .IsRequired();
                });

            modelBuilder.Entity("SomeShop.Domain.Products.Product", b =>
                {
                    b.Navigation("PurchaseItems");
                });

            modelBuilder.Entity("SomeShop.Domain.Purchases.Purchase", b =>
                {
                    b.Navigation("PurchaseItems");
                });

            modelBuilder.Entity("SomeShop.Domain.Users.User", b =>
                {
                    b.Navigation("Purchases");
                });
#pragma warning restore 612, 618
        }
    }
}
